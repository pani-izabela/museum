<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:jdbc="http://www.springframework.org/schema/jdbc"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/security
                http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <!--//poniżej konfigurujemy na jakie podstrony (parametr pattern) będzie miał prawo wejść użytkownik z przypisanymi rolami-->
    <!--//role dla użytkowników pobierane są z bazy poprzez metodę loadUserByUsername() z klasy AppUserServiceImpl, ktora musi implementowac UserDetailsService. Spring Security wie gdzie jej szukać dzięki authentication-provider skonfigurowanemu nizej-->

    <http auto-config="true">
        <intercept-url pattern="/admin/*" access="hasAuthority('admin')"/>

        <intercept-url pattern="/index" access="permitAll()"/>
        <intercept-url pattern="/hello" access="permitAll()"/>
        <intercept-url pattern="/login" access="permitAll()"/>
        <intercept-url pattern="/logout" access="permitAll()"/>
        <intercept-url pattern="/register" access="permitAll()"/>
        <intercept-url pattern="/client/register" access="permitAll()"/>
        <intercept-url pattern="/employee/register" access="permitAll()"/>
        <intercept-url pattern="/postLoginUser" access="hasAnyAuthority('client', 'employee', 'director', 'admin')"/>
        <intercept-url pattern="/postLoginUser.html" access="hasAnyAuthority('client', 'employee', 'director', 'admin')"/>
        <intercept-url pattern="/admin/onlyForAdmin" access="hasAnyAuthority('admin')"/>
        <intercept-url pattern="/admin/onlyForAdmin.html" access="hasAnyAuthority('admin')"/>
        <intercept-url pattern="/employees" access="hasAnyAuthority('admin', 'director')"/>
        <intercept-url pattern="/employees.html" access="hasAnyAuthority('admin', 'director')"/>
        <intercept-url pattern="/tickets" access="isAuthenticated()"/>
        <intercept-url pattern="/tickets.html" access="isAuthenticated()"/>
        <intercept-url pattern="/attractions.html" access="isAuthenticated()"/>
        <intercept-url pattern="/attractions" access="isAuthenticated()"/>
        <intercept-url pattern="/profile" access="isAuthenticated()"/>
        <intercept-url pattern="/profile.html" access="isAuthenticated()"/>
        <intercept-url pattern="/donation.html" access="isAuthenticated()"/>
        <intercept-url pattern="/donation" access="isAuthenticated()"/>
        <intercept-url pattern="/donationForm" access="hasAnyAuthority('client')"/>
        <intercept-url pattern="/donationForm.html" access="hasAnyAuthority('client')"/>


        <!--poniżej podajemy na której z podstron znajduje się nasz formularz logowania-->
        <form-login login-page="/login"
                    authentication-success-handler-ref="customAuthenticationSuccessHandler"
                    authentication-failure-handler-ref="customAuthenticationFailureHandler"
                    default-target-url="/index"
                    username-parameter="email"
                    password-parameter="pass"
                    authentication-failure-url="/login?error.html"/>

        <access-denied-handler error-page="/accessDenied"/>

        <logout logout-success-url="/login?logout"
                invalidate-session="true"
                delete-cookies="JSESSIONID"/>

        <csrf disabled="true"/>
    </http>

    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="appUserService">
            <password-encoder ref="passwordEncoder"/>
        </authentication-provider>
    </authentication-manager>
    <beans:bean class="application.service.AppUserServiceImpl"/>

<!--tutaj ustawiamy kodowanie haseł, w naszym przypadku przetrzymujemy je w bazie w postaci jawnej, odpowiada temu metoda NoOpPasswordEncoder - -->
    <!--jest ona oznaczona jako deprecated w kopmilatorze ale żeby nie komplikować z szyfrowaniem haseł w bazie użyłem właśnie jej-->
    <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.password.NoOpPasswordEncoder" factory-method="getInstance"/>

    <jdbc:embedded-database id="dataSource"/>
</beans:beans>